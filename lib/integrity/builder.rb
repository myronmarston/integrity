module Integrity
  class Builder
    def self.build(b)
      new(b).build
    end

    def initialize(build)
      @build  = build
      @status = false
      @output = ""
    end

    def build
      repo.checkout
      start
      run
      complete
    end

    def start
      Integrity.log "Started building #{@build.project.uri} at #{commit}"

      metadata = repo.metadata

      @build.update(
        :started_at => Time.now,
        :commit     => {
          :identifier   => metadata["id"],
          :message      => metadata["message"],
          :author       => metadata["author"],
          :committed_at => metadata["timestamp"]
        }
      )
    end

    def complete
      Integrity.log "Build #{commit} exited with #{@status} got:\n #{@output}"

      @build.update!(
        :completed_at => Time.now,
        :successful   => @status,
        :output       => @output
      )

      @build.project.enabled_notifiers.each { |n| n.notify_of_build(@build) }
    end

    def run
      cmd = "RUBYOPT=#{pre_bundler_rubyopt} && PATH=#{pre_bundler_path} && (cd #{repo.directory} && #{@build.project.command} 2>&1)"
      IO.popen(cmd, "r") { |io| @output = io.read }
      @status = $?.success?
    end

    def repo
      @repo ||= Repository.new(@build.project.uri, @build.project.branch, commit)
    end

    def commit
      @build.commit.identifier
    end

    private
      def environment_file
        File.expand_path(File.join(File.dirname(__FILE__), "../../vendor/gems/environment.rb"))
      end

      def environment_directory
        File.dirname(environment_file)
      end

      # The PATH before changes were made by bundler
      #
      # This is a bit of a hack to include and will need keeping in sync with
      # the ../../vendor/gems/environment.rb file generated by gem bundle
      def pre_bundler_path
        # Removes the additions multiple times since they can be added twice by bundler
        ENV['PATH'] && ENV['PATH'].strip.gsub(/^(#{Regexp.escape("#{environment_directory}/../../bin")}:)*/, '')
      end

      # The RUBYOPTS before changes were made by bundler
      #
      # This is a bit of a hack to include and will need keeping in sync with
      # the ../../vendor/gems/environment.rb file generated by gem bundle
      def pre_bundler_rubyopt
        # Removes the additions multiple times since they can be added twice by bundler
        ENV['RUBYOPT'] && ENV['RUBYOPT'].strip.gsub(/^(-r#{Regexp.escape(environment_file)}\s?)*/, '')
      end
  end
end
